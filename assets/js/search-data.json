{
  
    
        "post0": {
            "title": "Stock Visualizer",
            "content": "Credits to: Neuralnine . When code is executed, the following tkinter screen pop ups to enter the date range and stock to visualize. . . from tkinter import * from tkcalendar import DateEntry import datetime as dt import pandas_datareader as web import matplotlib.pyplot as plt import matplotlib.dates as mdates from mplfinance.original_flavor import candlestick_ohlc &#39;&#39;&#39; Function for visualizing stock data Using Candlestick Charts &#39;&#39;&#39; def visualize(): # Get Dates From DateEntry and Convert It To Datetime from_date = cal_from.get_date() to_date = cal_to.get_date() start = dt.datetime(from_date.year, from_date.month, from_date.day) end = dt.datetime(to_date.year, to_date.month, to_date.day) # Load Ticker From Entry And Download Data ticker = text_ticker.get() data = web.DataReader(ticker, &#39;yahoo&#39;, start, end) # Restructure Data Into OHLC Format data = data[[&#39;Open&#39;, &#39;High&#39;, &#39;Low&#39;, &#39;Close&#39;]] # Reset Index And Convert Dates Into Numerical Format data.reset_index(inplace=True) data[&#39;Date&#39;] = data[&#39;Date&#39;].map(mdates.date2num) # Adjust Style Of The Plot ax = plt.subplot() ax.grid(True) ax.set_axisbelow(True) ax.set_title(&#39;{} Share Price&#39;.format(ticker), color=&#39;white&#39;) ax.figure.canvas.manager.set_window_title(&#39;Stock Visualizer v0.1 Alpha&#39;) ax.set_facecolor(&#39;black&#39;) ax.figure.set_facecolor(&#39;#121212&#39;) ax.tick_params(axis=&#39;x&#39;, colors=&#39;white&#39;) ax.tick_params(axis=&#39;y&#39;, colors=&#39;white&#39;) ax.xaxis_date() # Plot The Candlestick Chart candlestick_ohlc(ax, data.values, width=0.5, colorup=&#39;#00ff00&#39;) plt.show() # Define Main Window root = Tk() root.title(&quot;Stock Visualizer v0.1 Alpha&quot;) # Add Components And Link Function label_from = Label(root, text=&quot;From:&quot;) label_from.pack() cal_from = DateEntry(root, width=50, year=2010, month=1, day=1) cal_from.pack(padx=10, pady=10) label_to = Label(root, text=&quot;To:&quot;) label_to.pack() cal_to = DateEntry(root, width=50) cal_to.pack(padx=10, pady=10) label_ticker = Label(root, text=&quot;Ticker Symbol:&quot;) label_ticker.pack() text_ticker = Entry(root) text_ticker.pack() btn_visualize = Button(root, text=&quot;Visualize&quot;, command=visualize) btn_visualize.pack() root.mainloop() .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/finances/tkinter/candlestick/2021/07/13/StockVisualizer.html",
            "relUrl": "/fastpages/jupyter/finances/tkinter/candlestick/2021/07/13/StockVisualizer.html",
            "date": " • Jul 13, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Optimizers",
            "content": "import pandas as pd import matplotlib.pyplot as plt import numpy as np import scipy.optimize as spo def f(X): Y = (X - 1.5)**2 + 0.5 print(&quot;X = {}, Y = {}&quot;.format(X, Y)) # for tracing return Y def test_run(): Xguess = 2.0 min_result = spo.minimize(f, Xguess, method=&#39;SLSQP&#39;, options={&#39;disp&#39;: True}) print(&quot;Minima found at:&quot;) print(&quot;X = {}, Y = {}&quot;.format(min_result.x, min_result.fun)) #Plot Xplot = np.linspace(0.5, 2.5, 21) Yplot = f(Xplot) plt.plot(Xplot, Yplot) plt.plot(min_result.x, min_result.fun, &#39;ro&#39;) plt.title(&quot;minima of an objective function&quot;) plt.show() if __name__ == &quot;__main__&quot;: test_run() . X = [2.], Y = [0.75] X = [2.00000001], Y = [0.75000001] X = [0.99999999], Y = [0.75000001] X = [1.5], Y = [0.5] X = [1.50000001], Y = [0.5] Optimization terminated successfully (Exit mode 0) Current function value: [0.5] Iterations: 2 Function evaluations: 5 Gradient evaluations: 2 Minima found at: X = [1.5], Y = [0.5] X = [0.5 0.6 0.7 0.8 0.9 1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2. 2.1 2.2 2.3 2.4 2.5], Y = [1.5 1.31 1.14 0.99 0.86 0.75 0.66 0.59 0.54 0.51 0.5 0.51 0.54 0.59 0.66 0.75 0.86 0.99 1.14 1.31 1.5 ] .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/07/07/Optimizers.html",
            "relUrl": "/fastpages/jupyter/2021/07/07/Optimizers.html",
            "date": " • Jul 7, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Use Python to calculate the Sharpe ratio for a portfolio",
            "content": "The Sharpe ratio is the average return earned in excess of the risk-free rate per unit of volatility (in the stock market, volatility represents the risk of an asset). It allows us to use mathematics in order to quantify the relationship between the mean daily return and then the volatility (or the standard deviation) of daily returns. . . . . . import os import pandas as pd import matplotlib.pyplot as plt import numpy as np def symbol_to_path(symbol, base_dir=&quot;data&quot;): &quot;&quot;&quot;Return CSV file path given ticker symbol.&quot;&quot;&quot; return os.path.join(base_dir,&quot;{}.csv&quot;.format(str(symbol))) def get_data(symbol, dates): &quot;&quot;&quot;Read stock data (adjusted close) for given symbols from CSV files.&quot;&quot;&quot; df = pd.DataFrame(index=dates) df_temp = pd.read_csv(symbol_to_path(symbol), index_col=&#39;Date&#39;, parse_dates=True, usecols=[&#39;Date&#39;, &#39;Adj Close&#39;], na_values=[&#39;nan&#39;]) #df_temp = df_temp.rename(columns={&#39;Adj Close&#39;: symbol}) df = df.join(df_temp) #if symbol == &#39;SPY&#39;: # drop dates SPY did not trade # df = df.dropna(subset=[&quot;SPY&quot;]) df = df.dropna() return df . def test_run(): # Read data dates = pd.date_range(&#39;2010-01-01&#39;, &#39;2010-12-31&#39;) # one month only symbols = [&#39;SPY&#39;,&#39;XOM&#39;,&#39;GOOG&#39;, &#39;IBM&#39;] generic_df = {} i = 1 for symbol in symbols: generic_df[i] = get_data(symbol, dates) #df = get_data(symbol, dates) i = i + 1 #First, the normalized return, which is simply dividing each close price by the last close price in the data. for stock_df in generic_df.values(): stock_df[&#39;Norm return&#39;] = stock_df[&#39;Adj Close&#39;] / stock_df.iloc[0][&#39;Adj Close&#39;] #We assume our portfolio will consist of: 35% for SPY, 25% for XOM, and 20% each for GOOG and IBM. for stock_df, allocation in zip((generic_df[1], generic_df[2], generic_df[3], generic_df[4]),[.35,.25,.2,.2]): stock_df[&#39;Allocation&#39;] = stock_df[&#39;Norm return&#39;] * allocation #The final for loop will add a column with the position value. #Let’s assume out portfolio size is 10k in the first day. #We simply multiply it with the Allocation column which is already adjusted to the normalized return. for stock_df in generic_df.values(): stock_df[&#39;Position&#39;] = stock_df[&#39;Allocation&#39;]*10000 #In order to get all our positions in one single table, we can isolate the column “Position” #from each stock and merge it in a new dataframe called “portf_val”. #We then rename the columns to match each stock. all_pos = [generic_df[1][&#39;Position&#39;],generic_df[2][&#39;Position&#39;], generic_df[3][&#39;Position&#39;], generic_df[4][&#39;Position&#39;]] portf_val = pd.concat(all_pos, axis=1) portf_val.columns = [&#39;SPY Pos&#39;,&#39;XOM Pos&#39;,&#39;GOOG Pos&#39;,&#39;IBM Pos&#39;] #We can also create a column to show the sum of all positions, which is our Total Position. portf_val[&#39;Total Pos&#39;] = portf_val.sum(axis=1) #print(portf_val.head()) #From here we can actually draw a few charts to have an idea of what happened to our portfolio value during all the days in our data. import matplotlib.pyplot as plt plt.style.use(&#39;fivethirtyeight&#39;) portf_val[&#39;Total Pos&#39;].plot(figsize=(10,8)) #How about our individual stocks? How did they perform? portf_val.drop(&#39;Total Pos&#39;, axis=1).plot(figsize=(10,8)) print(&quot;&quot;) #Let’s see how much was our cumulative return. cumulative_return = 100 * ( portf_val [ &#39;Total Pos&#39; ] [-1 ] / portf_val [ &#39;Total Pos&#39;] [ 0 ] -1) print(&#39;Your cumulative return was {:.2f}% &#39;.format(cumulative_return)) print(&quot;&quot;) #We can check the portf_val last row to see how much our portfolio was worth. print(&quot;Print out how much our portfolio was worth...&quot;) print(portf_val.tail(1)) #The daily return will be important to calculate the Sharpe ratio. portf_val[&#39;Daily Return&#39;] = portf_val[&#39;Total Pos&#39;].pct_change(1) #print(portf_val.head()) #Now it’s time to calculate the Sharpe ratio. #So the formula will be just the mean of the daily returns, divided by the standard deviation of the daily returns. In Python it will look like this: Sharpe_Ratio = portf_val[&#39;Daily Return&#39;].mean() / portf_val[&#39;Daily Return&#39;].std() print(&quot;&quot;) print(&quot;Sharpe Ratio:&quot;) print(Sharpe_Ratio) #To finish this article we need to annualize the Sharpe ratio, #since we calculated it from daily values. There are 252 trading days in the year, #so the simple way to annualize it is to multiply the Sharpe ratio by the square root of 252. A_SharpeRatio = (252**0.5)*Sharpe_Ratio print(&quot;&quot;) print(&quot;Annualized sharpe ratio: &quot;) print(A_SharpeRatio) #for dfx in generic_df.values(): # print(dfx.head()) if __name__ == &quot;__main__&quot;: test_run() . Your cumulative return was 8.29% Print out how much our portfolio was worth... SPY Pos XOM Pos GOOG Pos IBM Pos Total Pos 2010-12-31 3959.807782 2715.000045 1895.396884 2258.481693 10828.686403 Sharpe Ratio: 0.03481963857656052 Annualized sharpe ratio: 0.5527446264883812 .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/07/04/SharpeRatio.html",
            "relUrl": "/fastpages/jupyter/2021/07/04/SharpeRatio.html",
            "date": " • Jul 4, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Slicing DataFrames",
            "content": "import os import pandas as pd def symbol_to_path(symbol, base_dir=&quot;data&quot;): &quot;&quot;&quot;Return CSV file path given ticker symbol.&quot;&quot;&quot; return os.path.join(base_dir, &quot;{}.csv&quot;.format(str(symbol))) . Get data from csv file, set index for column &#39;Date&#39; get columns: &#39;Date&#39; and &#39;Adj Close&#39; . def get_data(symbols, dates): &quot;&quot;&quot;Read stock data (adjusted close) for given symbols from CSV files.&quot;&quot;&quot; df = pd.DataFrame(index=dates) if &#39;SPY&#39; not in symbols: # add SPY for reference, if absent symbols.insert(0, &#39;SPY&#39;) for symbol in symbols: # TODO: Read and join data for each symbol file = symbol_to_path(symbol) df_temp = pd.read_csv(file, index_col=&#39;Date&#39;, parse_dates=True, usecols=[&#39;Date&#39;, &#39;Adj Close&#39;], na_values=[&#39;nan&#39;]) df_temp = df_temp.rename(columns={&#39;Adj Close&#39;:symbol}) df = df.join(df_temp) df = df.dropna() return df . Define dates for range Define symbols to use . Slice different combinations of both . def test_run(): start_date=&#39;2010-01-01&#39; end_date=&#39;2010-12-31&#39; dates = pd.date_range(start_date, end_date) #Leer mas &#39;stocks&#39; symbols = [&#39;GOOG&#39;,&#39;IBM&#39;,&#39;GLD&#39;] df = get_data(symbols, dates) #Slice by row range using DataFrame[] selector print (df[&#39;2010-01-01&#39;:&#39;2010-01-31&#39;]) if __name__ == &quot;__main__&quot;: test_run() . SPY GOOG IBM GLD 2010-01-04 90.790062 312.204773 91.506264 109.800003 2010-01-05 91.030411 310.829926 90.400902 109.699997 2010-01-06 91.094490 302.994293 89.813629 111.510002 2010-01-07 91.479050 295.940735 89.502716 110.820000 2010-01-08 91.783432 299.885956 90.400902 111.370003 2010-01-11 91.911636 299.432648 89.454376 112.849998 2010-01-12 91.054436 294.137512 90.165970 110.489998 2010-01-13 91.823486 292.448822 89.972527 111.540001 2010-01-14 92.071815 293.823669 91.409561 112.029999 2010-01-15 91.038422 288.917053 91.043396 110.860001 2010-01-19 92.175987 292.712830 92.673851 111.519997 2010-01-20 91.238701 289.121307 89.986359 108.940002 2010-01-21 89.484276 290.401489 89.122757 107.370003 2010-01-22 87.489502 273.978058 86.704697 107.169998 2010-01-25 87.938095 268.991760 87.133049 107.480003 2010-01-26 87.569580 270.197235 86.877396 107.559998 2010-01-27 87.986176 270.037842 87.278122 106.529999 2010-01-28 86.976791 266.147400 85.495674 106.480003 2010-01-29 86.031456 263.980530 84.556068 105.959999 . def test_run(): start_date=&#39;2010-01-01&#39; end_date=&#39;2010-12-31&#39; dates = pd.date_range(start_date, end_date) #Leer mas &#39;stocks&#39; symbols = [&#39;GOOG&#39;,&#39;IBM&#39;,&#39;GLD&#39;] df = get_data(symbols, dates) #Slice by Column/s print (df[&#39;GOOG&#39;]) print (df[[&#39;IBM&#39;,&#39;GLD&#39;]]) if __name__ == &quot;__main__&quot;: test_run() . 2010-01-04 312.204773 2010-01-05 310.829926 2010-01-06 302.994293 2010-01-07 295.940735 2010-01-08 299.885956 ... 2010-12-27 300.065277 2010-12-28 298.341736 2010-12-29 299.377869 2010-12-30 298.311859 2010-12-31 295.875977 Name: GOOG, Length: 252, dtype: float64 IBM GLD 2010-01-04 91.506264 109.800003 2010-01-05 90.400902 109.699997 2010-01-06 89.813629 111.510002 2010-01-07 89.502716 110.820000 2010-01-08 90.400902 111.370003 ... ... ... 2010-12-27 102.332802 135.020004 2010-12-28 102.593338 137.220001 2010-12-29 103.163635 137.710007 2010-12-30 103.269241 137.029999 2010-12-31 103.332611 138.720001 [252 rows x 2 columns] . Slice by Columns and rows . def test_run(): start_date=&#39;2010-01-01&#39; end_date=&#39;2010-12-31&#39; dates = pd.date_range(start_date, end_date) #Leer mas &#39;stocks&#39; symbols = [&#39;GOOG&#39;,&#39;IBM&#39;,&#39;GLD&#39;] df = get_data(symbols, dates) #Slice by row and column print (df.loc[&#39;2010-01-01&#39;:&#39;2010-01-31&#39;, [&#39;SPY&#39;,&#39;IBM&#39;]]) #print(df.head()) if __name__ == &quot;__main__&quot;: test_run() . SPY IBM 2010-01-04 90.790062 91.506264 2010-01-05 91.030411 90.400902 2010-01-06 91.094490 89.813629 2010-01-07 91.479050 89.502716 2010-01-08 91.783432 90.400902 2010-01-11 91.911636 89.454376 2010-01-12 91.054436 90.165970 2010-01-13 91.823486 89.972527 2010-01-14 92.071815 91.409561 2010-01-15 91.038422 91.043396 2010-01-19 92.175987 92.673851 2010-01-20 91.238701 89.986359 2010-01-21 89.484276 89.122757 2010-01-22 87.489502 86.704697 2010-01-25 87.938095 87.133049 2010-01-26 87.569580 86.877396 2010-01-27 87.986176 87.278122 2010-01-28 86.976791 85.495674 2010-01-29 86.031456 84.556068 .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/07/01/SlicingDataFrames.html",
            "relUrl": "/fastpages/jupyter/2021/07/01/SlicingDataFrames.html",
            "date": " • Jul 1, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Exponential Function",
            "content": "import numpy as np import matplotlib.pyplot as plt def main(): x = np.linspace(0, 20, 100) y = np.exp(1.1**x) plt.figure() plt.plot(x, y) plt.xlabel(&#39;$x$&#39;) plt.ylabel(&#39;$ exp(x)$&#39;) plt.title(&#39;e^k*x&#39;) plt.figure() plt.plot(x, -np.exp(-x)) plt.xlabel(&#39;$x$&#39;) plt.ylabel(&#39;$- exp(-x)$&#39;) plt.show() if __name__ == &#39;__main__&#39;: main() .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/06/28/PlotExponentialFunction.html",
            "relUrl": "/fastpages/jupyter/2021/06/28/PlotExponentialFunction.html",
            "date": " • Jun 28, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Teachable machine",
            "content": "import tensorflow.keras from PIL import Image, ImageOps import numpy as np # Disable scientific notation for clarity np.set_printoptions(suppress=True) # Load the model model = tensorflow.keras.models.load_model(&#39;models/keras_model.h5&#39;, compile=False) # Create the array of the right shape to feed into the keras model # The &#39;length&#39; or number of images you can put into the array is # determined by the first position in the shape tuple, in this case 1. data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32) # Replace this with the path to your image image = Image.open(&#39;test_photo.jpg&#39;) #resize the image to a 224x224 with the same strategy as in TM2: #resizing the image to be at least 224x224 and then cropping from the center size = (224, 224) image = ImageOps.fit(image, size, Image.ANTIALIAS) #turn the image into a numpy array image_array = np.asarray(image) # display the resized image image.show() # Normalize the image normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1 # Load the image into the array data[0] = normalized_image_array # run the inference prediction = model.predict(data) print(prediction) . [[0.99997115 0.00002884]] .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/06/25/TeachableMachine.html",
            "relUrl": "/fastpages/jupyter/2021/06/25/TeachableMachine.html",
            "date": " • Jun 25, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Rolling Statistics",
            "content": ". Rolling Statistics: . . Bolinger Bands: . . &quot;&quot;&quot;Bollinger Bands.&quot;&quot;&quot; import os import pandas as pd import matplotlib.pyplot as plt def symbol_to_path(symbol, base_dir=&quot;data&quot;): &quot;&quot;&quot;Return CSV file path given ticker symbol.&quot;&quot;&quot; return os.path.join(base_dir, &quot;{}.csv&quot;.format(str(symbol))) def get_data(symbols, dates): &quot;&quot;&quot;Read stock data (adjusted close) for given symbols from CSV files.&quot;&quot;&quot; df = pd.DataFrame(index=dates) if &#39;SPY&#39; not in symbols: # add SPY for reference, if absent symbols.insert(0, &#39;SPY&#39;) for symbol in symbols: df_temp = pd.read_csv(symbol_to_path(symbol), index_col=&#39;Date&#39;, parse_dates=True, usecols=[&#39;Date&#39;, &#39;Adj Close&#39;], na_values=[&#39;nan&#39;]) df_temp = df_temp.rename(columns={&#39;Adj Close&#39;: symbol}) df = df.join(df_temp) if symbol == &#39;SPY&#39;: # drop dates SPY did not trade df = df.dropna(subset=[&quot;SPY&quot;]) return df def plot_data(df, title=&quot;Stock prices&quot;): &quot;&quot;&quot;Plot stock prices with a custom title and meaningful axis labels.&quot;&quot;&quot; ax = df.plot(title=title, fontsize=12) ax.set_xlabel(&quot;Date&quot;) ax.set_ylabel(&quot;Price&quot;) plt.show() def get_rolling_mean(values, window): &quot;&quot;&quot;Return rolling mean of given values, using specified window size.&quot;&quot;&quot; #return pd.rolling_mean(values, window=window) return values.rolling(window=window).mean() def get_rolling_std(values, window): &quot;&quot;&quot;Return rolling standard deviation of given values, using specified window size.&quot;&quot;&quot; # TODO: Compute and return rolling standard deviation return values.rolling(window=window).std() def get_bollinger_bands(rm, rstd): &quot;&quot;&quot;Return upper and lower Bollinger Bands.&quot;&quot;&quot; # TODO: Compute upper_band and lower_band upper_band = rm + (rstd * 2) lower_band = rm - (rstd * 2) return upper_band, lower_band def test_run(): # Read data dates = pd.date_range(&#39;2010-05-01&#39;, &#39;2010-10-31&#39;) symbols = [&#39;SPY&#39;] df = get_data(symbols, dates) #print(df) # Compute Bollinger Bands # 1. Compute rolling mean rm_SPY = get_rolling_mean(df[&#39;SPY&#39;], window=20) # 2. Compute rolling standard deviation rstd_SPY = get_rolling_std(df[&#39;SPY&#39;], window=20) # 3. Compute upper and lower bands upper_band, lower_band = get_bollinger_bands(rm_SPY, rstd_SPY) # Plot raw SPY values, rolling mean and Bollinger Bands ax = df[&#39;SPY&#39;].plot(title=&quot;Bollinger Bands&quot;, label=&#39;SPY&#39;) rm_SPY.plot(label=&#39;Rolling mean&#39;, ax=ax) upper_band.plot(label=&#39;upper band&#39;, ax=ax) lower_band.plot(label=&#39;lower band&#39;, ax=ax) # Add axis labels and legend ax.set_xlabel(&quot;Date&quot;) ax.set_ylabel(&quot;Price&quot;) ax.legend(loc=&#39;upper left&#39;) plt.show() if __name__ == &quot;__main__&quot;: test_run() .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/06/25/RollingMeanBollingerBands.html",
            "relUrl": "/fastpages/jupyter/2021/06/25/RollingMeanBollingerBands.html",
            "date": " • Jun 25, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Daily Returns",
            "content": "&quot;&quot;&quot;Compute daily returns.&quot;&quot;&quot; import os import pandas as pd import matplotlib.pyplot as plt import numpy as np def symbol_to_path(symbol, base_dir=&quot;data&quot;): &quot;&quot;&quot;Return CSV file path given ticker symbol.&quot;&quot;&quot; return os.path.join(base_dir,&quot;{}.csv&quot;.format(str(symbol))) def get_data(symbols, dates): &quot;&quot;&quot;Read stock data (adjusted close) for given symbols from CSV files.&quot;&quot;&quot; df = pd.DataFrame(index=dates) if &#39;SPY&#39; not in symbols: # add SPY for reference, if absent symbols.insert(0, &#39;SPY&#39;) for symbol in symbols: df_temp = pd.read_csv(symbol_to_path(symbol), index_col=&#39;Date&#39;, parse_dates=True, usecols=[&#39;Date&#39;, &#39;Adj Close&#39;], na_values=[&#39;nan&#39;]) df_temp = df_temp.rename(columns={&#39;Adj Close&#39;: symbol}) df = df.join(df_temp) if symbol == &#39;SPY&#39;: # drop dates SPY did not trade df = df.dropna(subset=[&quot;SPY&quot;]) return df def plot_data(df, title=&quot;Stock prices&quot;, xlabel=&quot;Date&quot;, ylabel=&quot;Price&quot;): &quot;&quot;&quot;Plot stock prices with a custom title and meaningful axis labels.&quot;&quot;&quot; ax = df.plot(title=title, fontsize=12) ax.set_xlabel(xlabel) ax.set_ylabel(ylabel) plt.show() def compute_daily_returns(df): &quot;&quot;&quot;Compute and return the daily return values.&quot;&quot;&quot; # TODO: Your code here # Note: Returned DataFrame must have the same number of rows daily_returns = df.copy() df.fillna(method=&#39;ffill&#39;, inplace=True) daily_returns[1:] = (df[1:] / df[:-1].values) -1 daily_returns.iloc[0, :] = 0 #print(daily_returns.head()) daily_returns[&#39;Cumulative_return_SPY&#39;] = np.cumsum(daily_returns[&#39;SPY&#39;]) daily_returns[&#39;Cumulative_return_XOM&#39;] = np.cumsum(daily_returns[&#39;XOM&#39;]) #print(daily_returns.tail()) return daily_returns def test_run(): # Read data dates = pd.date_range(&#39;2010-07-01&#39;, &#39;2010-07-31&#39;) # one month only symbols = [&#39;SPY&#39;,&#39;XOM&#39;] df = get_data(symbols, dates) plot_data(df) # Compute daily returns daily_returns = compute_daily_returns(df) plot_data(daily_returns, title=&quot;Daily returns&quot;, ylabel=&quot;Daily returns&quot;) if __name__ == &quot;__main__&quot;: test_run() .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/06/24/dailyReturns.html",
            "relUrl": "/fastpages/jupyter/2021/06/24/dailyReturns.html",
            "date": " • Jun 24, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Normalize stock data",
            "content": "Function to plot data . Regarding slicing data, it will be explained in a specific notebook . import os import pandas as pd import matplotlib.pyplot as plt def plot_selected(df, columns, start_index, end_index): &quot;&quot;&quot;Plot the desired columns over index values in the given range.&quot;&quot;&quot; #ax = df.plot() plt.show() #Impresion de columnas seleccionadas con slicing plot_data(df.loc[start_index:end_index, columns]) #Plot todos los datos sin normalizar plot_data(df) #Impresion de datos normalizados. Se divide el dataFrame por la primer fila, entonces todos arrancan en 1 plot_data(normalize_data(df)) . The concept of Normalize data is to divide the dataframe for the first row. With this, all stocks starts in 1 . def normalize_data(df): return(df / df.iloc[0,:]) . def symbol_to_path(symbol, base_dir=&quot;data&quot;): &quot;&quot;&quot;Return CSV file path given ticker symbol.&quot;&quot;&quot; return os.path.join(base_dir, &quot;{}.csv&quot;.format(str(symbol))) def get_data(symbols, dates): &quot;&quot;&quot;Read stock data (adjusted close) for given symbols from CSV files.&quot;&quot;&quot; df = pd.DataFrame(index=dates) if &#39;SPY&#39; not in symbols: # add SPY for reference, if absent symbols.insert(0, &#39;SPY&#39;) for symbol in symbols: df_temp = pd.read_csv(symbol_to_path(symbol), index_col=&#39;Date&#39;, parse_dates=True, usecols=[&#39;Date&#39;, &#39;Adj Close&#39;], na_values=[&#39;nan&#39;]) df_temp = df_temp.rename(columns={&#39;Adj Close&#39;: symbol}) df = df.join(df_temp) if symbol == &#39;SPY&#39;: # drop dates SPY did not trade df = df.dropna(subset=[&quot;SPY&quot;]) return df def plot_data(df, title=&quot;Stock prices&quot;): &quot;&quot;&quot;Plot stock prices with a custom title and meaningful axis labels.&quot;&quot;&quot; ax = df.plot(title=title, fontsize=12) ax.set_xlabel(&quot;Date&quot;) ax.set_ylabel(&quot;Price&quot;) plt.show() . def test_run(): # Define a date range dates = pd.date_range(&#39;2010-01-01&#39;, &#39;2010-12-31&#39;) # Choose stock symbols to read symbols = [&#39;GOOG&#39;, &#39;IBM&#39;, &#39;GLD&#39;] # SPY will be added in get_data() # Get stock data df = get_data(symbols, dates) # Slice and plot plot_selected(df, [&#39;SPY&#39;, &#39;IBM&#39;], &#39;2010-03-01&#39;, &#39;2010-04-01&#39;) #df = df.iloc[0,:] #df.plot() if __name__ == &quot;__main__&quot;: test_run() .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/06/24/NormalizeDataAndPlot.html",
            "relUrl": "/fastpages/jupyter/2021/06/24/NormalizeDataAndPlot.html",
            "date": " • Jun 24, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Important articles",
            "content": "How to create your Free Data Science Blog on Github with Fastpages from Fastai . .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/fastpages/jupyter/2021/06/24/ImportantNotesAndArticles.html",
            "relUrl": "/fastpages/jupyter/2021/06/24/ImportantNotesAndArticles.html",
            "date": " • Jun 24, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) &lt;ipython-input-2-88b922e30289&gt; in &lt;module&gt; 1 #collapse-hide 2 import pandas as pd -&gt; 3 import altair as alt ModuleNotFoundError: No module named &#39;altair&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://fercanepari.github.io/JupyterNotebookFastPages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://fercanepari.github.io/JupyterNotebookFastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fercanepari.github.io/JupyterNotebookFastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}